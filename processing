#!/usr/bin/env python3

import struct
import argparse
import os

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

SAVE_NETWORK		= 0x01
SAVE_TRAIN			= 0x02
SAVE_TEST			= 0x03
SAVE_ARRAY			= 0x04
SAVE_TYPE			= 0x11
SAVE_MNIST_TYPE		= 0x12
SAVE_MNIST_PROC		= 0x13
SAVE_GAMMA			= 0x14
SAVE_ALPHA			= 0x15
SAVE_TAU			= 0x16
SAVE_ACT			= 0x17
SAVE_WEIGHTS_INIT	= 0x18
SAVE_NLAYERS		= 0x19
SAVE_LAYERS			= 0x1A
SAVE_NTARGETS		= 0x1B
SAVE_TARGETS		= 0x1C
SAVE_WEIGHTS		= 0x1D
SAVE_NUM_SAMPLES	= 0x1E
SAVE_DELTAW_MAGS	= 0x1F
SAVE_ITER_COUNTS	= 0x20
SAVE_ENERGIES		= 0x21
SAVE_LENERGIES		= 0x22
SAVE_TRAIN_COSTS	= 0x23
SAVE_COSTS			= 0x24
SAVE_LABELS			= 0x25
SAVE_PREDICTIONS	= 0x26
SAVE_OUTPUTS		= 0x27
SAVE_NUM_CORRECT	= 0x28
SAVE_DELTAX_MAGS	= 0x29

SAVE_SIZET			= 0x01
SAVE_DOUBLET		= 0x02

class FileReader:
	def __init__(self, filename):
		self.filename = filename
		self.dir, self.netname = filename.rsplit('/', 1)
		self.netname = self.netname.split('.')[0]

		with open(filename, "rb") as f:
			self.f = f.read()
		
		self.pos = 0
	
	def get_name(self):
		return self.dir, self.netname

	def _read(self, n, dtype=SAVE_SIZET, squeeze=True):
		start = self.pos
		self.pos += 8*n

		if dtype == SAVE_SIZET:
			read_str = f'{n}Q'
		elif dtype == SAVE_DOUBLET:
			read_str = f'{n}d'
		else:
			print(f"Unkown data type specified {dtype} for scalar, defaulting to unsigned long")
			read_str = f'{n}Q'

		data = struct.unpack(read_str, self.f[start:self.pos])

		return data[0] if n == 1 and squeeze else data

	def read_data(self, typelist):
		ret = {}
		while self.pos != len(self.f):
			label, dtype, tensor_dim, ndims = self._read(4)
			# print(f"label: {label}, tdim: {tensor_dim}, ndims: {ndims}")

			if tensor_dim == 0:
				ret[label] = [self._read(1, dtype=dtype)]
				continue
			
			dims = self._read(ndims, squeeze=False)

			if label in typelist:
				ret[label] = []
				self._recursive_read(ret[label], dtype, dims, 0)
			else:
				self._recursive_read(None, dtype, dims, 0)

		for key in ret.keys():
			if len(ret[key]) == 1:
				ret[key] = ret[key][0]

		return ret
	
	def _recursive_read(self, data, dtype, dims, depth):
		for i in range(dims[depth]):
			if depth == len(dims)-1:
				mat = self._read_mat(dtype)
				if data is not None:
					data.append(mat)
			else:
				if data is not None:
					data.append([])
				self._recursive_read(data[i] if data is not None else None, dtype, dims, depth+1)
	
	def _read_mat(self, dtype):
		size = self._read(2)
		count = size[0] * size[1]

		if dtype == SAVE_SIZET:
			rdtype = np.uint64
		elif dtype == SAVE_DOUBLET:
			rdtype = np.float64
		else:
			print(f"Unkown data type specified {dtype} for matrix, defaulting to double")
			rdtype = np.float64


		ret = np.frombuffer(self.f, dtype=rdtype, offset=self.pos, count=count).reshape(size)
		self.pos += 8 * count
		return ret[0] if size[0] == 1 else ret


class Network:
	def __init__(self, filename):
		self.file = FileReader(filename)
		self.dir, self.netname = self.file.get_name()

		data = self.file.read_data([SAVE_TYPE, SAVE_MNIST_TYPE, SAVE_MNIST_PROC, SAVE_GAMMA, SAVE_ALPHA, SAVE_ACT, SAVE_WEIGHTS_INIT, SAVE_LAYERS, SAVE_TARGETS, SAVE_WEIGHTS])

		if (data[SAVE_TYPE] != SAVE_NETWORK):
			print("ERROR: filetype does not match class")
			exit(1)
		
		self.mnist_type = data.get(SAVE_MNIST_TYPE)
		self.mnist_proc = data.get(SAVE_MNIST_PROC)
		self.gamma = data.get(SAVE_GAMMA)
		self.alpha = data.get(SAVE_ALPHA)
		self.act = data.get(SAVE_ACT)
		self.weights_init = data.get(SAVE_WEIGHTS_INIT)
		self.layers = data.get(SAVE_LAYERS)
		self.targets = data.get(SAVE_TARGETS)
		self.weights = data.get(SAVE_WEIGHTS)
		self.nlayers = data.get(SAVE_NLAYERS)
		self.ntargets = len(self.targets)

class TrainData:
	def __init__(self, filename, net):
		self.file = FileReader(filename)
		self.net = net
		_, file = filename.rsplit('/', 1)
		basename, _ = file.rsplit('.', 1)
		self.plt = Plotter(net, prefix=f"Train_{basename}")

		data = self.file.read_data([SAVE_TYPE, SAVE_DELTAW_MAGS, SAVE_ITER_COUNTS, SAVE_ENERGIES, SAVE_LENERGIES, SAVE_COSTS, SAVE_DELTAX_MAGS])

		if data[SAVE_TYPE] != SAVE_TRAIN:
			print("Error: Filetype does not match class")
			exit(1)
		
		self.deltaw_mags = data.get(SAVE_DELTAW_MAGS)
		self.iter_counts = data.get(SAVE_ITER_COUNTS)
		# self.energies = data.get(SAVE_ENERGIES)
		self.lenergies = data.get(SAVE_LENERGIES)
		self.train_costs = data.get(SAVE_COSTS)
		self.deltax_mags = data.get(SAVE_DELTAX_MAGS)

		if self.lenergies is not None:
			self.energies = []
			for sample in self.lenergies:
				layers = np.array([np.array(x) for x in sample])
				self.energies.append(layers.sum(axis=0))
	
	def plot_all(self):
		if self.deltaw_mags is not None:
			self.plt.plot_dw(self.deltaw_mags)
		if self.iter_counts is not None:
			self.plt.plot_iters(self.iter_counts)
		if self.train_costs is not None:
			self.plt.plot_costs([self.train_costs])
		
		if self.energies is not None:
			self.plt.plot_energy_res(self.energies)
			self.plt.plot_energies(self.energies)
		
		if self.lenergies is not None:
			self.plt.plot_energy_ratio(self.lenergies)
			self.plt.plot_lenergies(self.lenergies)
		
		if self.deltax_mags is not None:
			self.plt.plot_dx(self.deltax_mags)

class TestData:
	def __init__(self, filename, net):
		self.file = FileReader(filename)
		dir, file = filename.rsplit('/', 1)
		basename, _ = file.rsplit('.', 1)
		self.net = net
		self.plt = Plotter(net, prefix=f"Test_{basename}")

		data = self.file.read_data([SAVE_TYPE, SAVE_LABELS, SAVE_PREDICTIONS, SAVE_COSTS, SAVE_OUTPUTS, SAVE_LENERGIES, SAVE_ITER_COUNTS])

		if (data[SAVE_TYPE] != SAVE_TEST):
			print("ERROR: filetype does not match class")
			exit(1)

		self.labels = data.get(SAVE_LABELS)
		self.predictions = data.get(SAVE_PREDICTIONS)
		self.costs = data.get(SAVE_COSTS)
		self.outputs = data.get(SAVE_OUTPUTS)
		# self.energies = data.get(SAVE_ENERGIES)
		self.lenergies = data.get(SAVE_LENERGIES)
		self.iter_counts = data.get(SAVE_ITER_COUNTS)

		if self.lenergies is not None:
			self.energies = []
			for sample in self.lenergies:
				layers = np.array([np.array(x) for x in sample])
				self.energies.append(layers.sum(axis=0))
		else:
			self.energies = None

	def plot_all(self):
		if self.costs is not None:
			self.plt.plot_costs(self.costs)
		if self.labels is not None and self.predictions is not None:
			self.plt.plot_preds(self.labels, self.predictions)
		if self.outputs is not None and self.labels is not None and self.net.targets is not None:
			self.plt.plot_outputs(self.outputs, self.labels, self.net.targets)
		if self.iter_counts is not None:
			self.plt.plot_iters(self.iter_counts)
		
		if self.energies is not None:
			self.plt.plot_energy_res(self.energies)
			self.plt.plot_energies(self.energies)
		
		if self.lenergies is not None:
			self.plt.plot_lenergies(self.lenergies)
			self.plt.plot_energy_ratio(self.lenergies)
		
class Plotter:
	def __init__(self, net: Network, prefix=None, suffix=None):
		self.net = net
		self.prefix = f"{prefix}_" if prefix else ""
		self.suffix =f"{suffix}_" if suffix else ""
	
		self.colors = ['blue', 'red', 'green', 'yellow', 'black', 'orange', 'pink', 'brown', 'cyan', 'magenta']

	def _save(self, filename):
		plt.savefig(f'{self.net.dir}/{self.prefix}{filename}{self.suffix}.png')
		plt.close()
	
	def _title(self, title):
		plt.title(f"{title} - {self.prefix}{self.net.netname}{self.suffix}")
	
	def scatter(self, y, label="", s=10, alpha=0.2, marker='x'):
		sns.regplot(x=np.arange(len(y)), y=y, label=label, marker=marker, scatter_kws={
			's': s,
			'alpha': alpha
		})

	def _set_labels(self, xlabel, ylabel):
		plt.xlabel(xlabel)
		plt.ylabel(ylabel)
	
	def filter(self, y):
		return [x for x in y if x != 0]

	def plot_dw(self, dw):
		i = 0
		for layer in dw:
			self.scatter(layer, label=f"Layer {i}")
			i += 1

		plt.yscale('log')
		plt.legend(loc='upper right')
		self._set_labels("Magnitude", "Training Sample")
		self._title("Magnitude of weight change")
		self._save("deltaw_mags")
	
	def plot_dx(self, dx):
		for sample in dx:
			count = 0
			for layer in sample:
				filtered = self.filter(layer)
				plt.semilogy(filtered, c=self.colors[count])
				count += 1
		
		plt.legend([f"Layer {i}" for i in range(self.net.nlayers-2)])
		self._set_labels("Iterations", "Magnitude of neuron change")
		self._title("Magnitude of neuron changes")
		self._save("deltax_mags")
	
	def plot_iters(self, iters):
		self.scatter(iters)

		self._set_labels("Training Sample", "Number of iterations")
		self._title("Number of iterations")
		self._save("iters")
	
	def plot_costs(self, costs):
		for line in costs:
			plt.plot(line)

		self._set_labels("Sample", "Cost")
		self._title("Cost")
		self._save("costs")
	
	def plot_energies(self, energies):
		for sample in energies:
			filtered = self.filter(sample)
			plt.semilogy(filtered)
		
		self._set_labels("Iteration", "Energy")
		self._title("Energy across iterations")
		self._save("energies")
	
	def plot_lenergies(self, lenergies):
		for sample in lenergies:
			count = 0
			for layer in sample:
				filtered = self.filter(layer)
				plt.semilogy(filtered, c=self.colors[count])
				count += 1
			
		plt.legend([f"Layer {i}" for i in range(self.net.nlayers-1)])
		self._set_labels("Iterations", "Energy")
		self._title("Energy in each layer across iterations")
		self._save("lenergies")
	
	def plot_energy_res(self, energies):
		for sample in energies:
			filtered = self.filter(sample)
			res = [sample[i] - sample[i+1] for i in range(len(filtered)-1)]
			filtered_res = self.filter(res)
			plt.semilogy(filtered_res)
		
		self._set_labels("Iterations", "delta energy")
		self._title("Change in energy across iterations")
		self._save("denergies")

	def plot_energy_ratio(self, lenergies):
		for sample in lenergies:
			layers = np.array([np.array(x) for x in sample])
			total = layers.sum(axis=0)
			ratio = [layers[-1][i] / total[i] for i in range(len(total)) if total[i] != 0]

			plt.plot(ratio)

		self._set_labels("Iterations", "Final energy / total energy")
		self._title("Ratio of final energy ratio to total energy")
		self._save("flenergy_ratio")
	
	def plot_preds(self, labels, predictions):
		num_samples = len(labels)
		num_correct = np.array([1 for i in range(len(labels)) if labels[i] == predictions[i]]).sum()
		num_false = num_samples - num_correct

		fig, (pie, tbl) = plt.subplots(1, 2, figsize=(10,5))

		pie.pie([num_correct, num_false], labels=[f"Correct: {num_correct}", f"False: {num_false}"])

		table = [
			["total", num_samples],
			["accuracy", num_correct / num_samples]
		]
		tbl.axis("off")
		tbl.table(table, loc="center")
		self._title("Prediction stats")
		self._save("preds")
	
	def plot_outputs(self, outputs, labels, targets):
		for i in range(len(labels)):
			target, = np.where(targets == labels[i])[0]
			plt.scatter(np.arange(len(targets)), outputs[i], c=self.colors[target % len(targets)])
		
		plt.legend([f"{targets[i]}" for i in range(len(targets))])

		self._set_labels("Neuron", "Neuron activation")
		self._title("Output vectors")
		self._save("outputs")

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('-f', '--folder')
	args = parser.parse_args()

	if not args.folder:
		folders = os.listdir('results')
		paths = [os.path.join('results', basename) for basename in folders]
		args.folder = f'{max(paths, key=os.path.getctime)}'

	networks = [f"{args.folder}/{x}" for x in os.listdir(args.folder) if x.endswith(".net")]
	if len(networks) == 1:
		network = networks[0]

		net = Network(network)
		basename, _ = network.rsplit('.', 1)
		train = TrainData(f"{basename}.traindata", net)
		train.plot_all()

		for file in os.listdir(args.folder):
			if file.endswith('testdata'):
				test = TestData(f"{args.folder}/{file}", net)
				test.plot_all()
	else:
		for network in networks:
			print(f"Processing {network}")
			net = Network(network)

			basename, _ = network.rsplit('.', 1)

			traindata = f"{basename}.traindata"
			testdata = f"{basename}.testdata"

			print(f"traindata = {traindata}")
			print(f"testdata = {testdata}")
			if os.path.isfile(traindata):
				print(f"processing {traindata}")
				train = TrainData(traindata, net)
				train.plot_all()
			
			if os.path.isfile(testdata):
				print(f"processing {testdata}")
				test = TestData(testdata, net)
				test.plot_all()